// modules are defined as an array
// [ module function, map of requires ]
//
// map of requires is short require name -> numeric require
//
// anything defined in a previous bundle is accessed via the
// orig method which is the require for previous bundles
parcelRequire = (function (modules, cache, entry, globalName) {
    // Save the require from previous bundle to this closure if any
    var previousRequire = typeof parcelRequire === 'function' && parcelRequire;
    var nodeRequire = typeof require === 'function' && require;
  
    function newRequire(name, jumped) {
      if (!cache[name]) {
        if (!modules[name]) {
          // if we cannot find the module within our internal map or
          // cache jump to the current global require ie. the last bundle
          // that was added to the page.
          var currentRequire = typeof parcelRequire === 'function' && parcelRequire;
          if (!jumped && currentRequire) {
            return currentRequire(name, true);
          }
  
          // If there are other bundles on this page the require from the
          // previous one is saved to 'previousRequire'. Repeat this as
          // many times as there are bundles until the module is found or
          // we exhaust the require chain.
          if (previousRequire) {
            return previousRequire(name, true);
          }
  
          // Try the node require function if it exists.
          if (nodeRequire && typeof name === 'string') {
            return nodeRequire(name);
          }
  
          var err = new Error('Cannot find module \'' + name + '\'');
          err.code = 'MODULE_NOT_FOUND';
          throw err;
        }
  
        localRequire.resolve = resolve;
        localRequire.cache = {};
  
        var module = cache[name] = new newRequire.Module(name);
  
        modules[name][0].call(module.exports, localRequire, module, module.exports, this);
      }
  
      return cache[name].exports;
  
      function localRequire(x){
        return newRequire(localRequire.resolve(x));
      }
  
      function resolve(x){
        return modules[name][1][x] || x;
      }
    }
  
    function Module(moduleName) {
      this.id = moduleName;
      this.bundle = newRequire;
      this.exports = {};
    }
  
    newRequire.isParcelRequire = true;
    newRequire.Module = Module;
    newRequire.modules = modules;
    newRequire.cache = cache;
    newRequire.parent = previousRequire;
    newRequire.register = function (id, exports) {
      modules[id] = [function (require, module) {
        module.exports = exports;
      }, {}];
    };
  
    var error;
    for (var i = 0; i < entry.length; i++) {
      try {
        newRequire(entry[i]);
      } catch (e) {
        // Save first error but execute all entries
        if (!error) {
          error = e;
        }
      }
    }
  
    if (entry.length) {
      // Expose entry point to Node, AMD or browser globals
      // Based on https://github.com/ForbesLindesay/umd/blob/master/template.js
      var mainExports = newRequire(entry[entry.length - 1]);
  
      // CommonJS
      if (typeof exports === "object" && typeof module !== "undefined") {
        module.exports = mainExports;
  
      // RequireJS
      } else if (typeof define === "function" && define.amd) {
       define(function () {
         return mainExports;
       });
  
      // <script>
      } else if (globalName) {
        this[globalName] = mainExports;
      }
    }
  
    // Override the current require with this new one
    parcelRequire = newRequire;
  
    if (error) {
      // throw error from earlier, _after updating parcelRequire_
      throw error;
    }
  
    return newRequire;
  })({"../node_modules/regenerator-runtime/runtime.js":[function(require,module,exports) {
  var define;
  /**
   * Copyright (c) 2014-present, Facebook, Inc.
   *
   * This source code is licensed under the MIT license found in the
   * LICENSE file in the root directory of this source tree.
   */
  
  var runtime = (function (exports) {
    "use strict";
  
    var Op = Object.prototype;
    var hasOwn = Op.hasOwnProperty;
    var undefined; // More compressible than void 0.
    var $Symbol = typeof Symbol === "function" ? Symbol : {};
    var iteratorSymbol = $Symbol.iterator || "@@iterator";
    var asyncIteratorSymbol = $Symbol.asyncIterator || "@@asyncIterator";
    var toStringTagSymbol = $Symbol.toStringTag || "@@toStringTag";
  
    function define(obj, key, value) {
      Object.defineProperty(obj, key, {
        value: value,
        enumerable: true,
        configurable: true,
        writable: true
      });
      return obj[key];
    }
    try {
      // IE 8 has a broken Object.defineProperty that only works on DOM objects.
      define({}, "");
    } catch (err) {
      define = function(obj, key, value) {
        return obj[key] = value;
      };
    }
  
    function wrap(innerFn, outerFn, self, tryLocsList) {
      // If outerFn provided and outerFn.prototype is a Generator, then outerFn.prototype instanceof Generator.
      var protoGenerator = outerFn && outerFn.prototype instanceof Generator ? outerFn : Generator;
      var generator = Object.create(protoGenerator.prototype);
      var context = new Context(tryLocsList || []);
  
      // The ._invoke method unifies the implementations of the .next,
      // .throw, and .return methods.
      generator._invoke = makeInvokeMethod(innerFn, self, context);
  
      return generator;
    }
    exports.wrap = wrap;
  
    // Try/catch helper to minimize deoptimizations. Returns a completion
    // record like context.tryEntries[i].completion. This interface could
    // have been (and was previously) designed to take a closure to be
    // invoked without arguments, but in all the cases we care about we
    // already have an existing method we want to call, so there's no need
    // to create a new function object. We can even get away with assuming
    // the method takes exactly one argument, since that happens to be true
    // in every case, so we don't have to touch the arguments object. The
    // only additional allocation required is the completion record, which
    // has a stable shape and so hopefully should be cheap to allocate.
    function tryCatch(fn, obj, arg) {
      try {
        return { type: "normal", arg: fn.call(obj, arg) };
      } catch (err) {
        return { type: "throw", arg: err };
      }
    }
  
    var GenStateSuspendedStart = "suspendedStart";
    var GenStateSuspendedYield = "suspendedYield";
    var GenStateExecuting = "executing";
    var GenStateCompleted = "completed";
  
    // Returning this object from the innerFn has the same effect as
    // breaking out of the dispatch switch statement.
    var ContinueSentinel = {};
  
    // Dummy constructor functions that we use as the .constructor and
    // .constructor.prototype properties for functions that return Generator
    // objects. For full spec compliance, you may wish to configure your
    // minifier not to mangle the names of these two functions.
    function Generator() {}
    function GeneratorFunction() {}
    function GeneratorFunctionPrototype() {}
  
    // This is a polyfill for %IteratorPrototype% for environments that
    // don't natively support it.
    var IteratorPrototype = {};
    IteratorPrototype[iteratorSymbol] = function () {
      return this;
    };
  
    var getProto = Object.getPrototypeOf;
    var NativeIteratorPrototype = getProto && getProto(getProto(values([])));
    if (NativeIteratorPrototype &&
        NativeIteratorPrototype !== Op &&
        hasOwn.call(NativeIteratorPrototype, iteratorSymbol)) {
      // This environment has a native %IteratorPrototype%; use it instead
      // of the polyfill.
      IteratorPrototype = NativeIteratorPrototype;
    }
  
    var Gp = GeneratorFunctionPrototype.prototype =
      Generator.prototype = Object.create(IteratorPrototype);
    GeneratorFunction.prototype = Gp.constructor = GeneratorFunctionPrototype;
    GeneratorFunctionPrototype.constructor = GeneratorFunction;
    GeneratorFunction.displayName = define(
      GeneratorFunctionPrototype,
      toStringTagSymbol,
      "GeneratorFunction"
    );
  
    // Helper for defining the .next, .throw, and .return methods of the
    // Iterator interface in terms of a single ._invoke method.
    function defineIteratorMethods(prototype) {
      ["next", "throw", "return"].forEach(function(method) {
        define(prototype, method, function(arg) {
          return this._invoke(method, arg);
        });
      });
    }
  
    exports.isGeneratorFunction = function(genFun) {
      var ctor = typeof genFun === "function" && genFun.constructor;
      return ctor
        ? ctor === GeneratorFunction ||
          // For the native GeneratorFunction constructor, the best we can
          // do is to check its .name property.
          (ctor.displayName || ctor.name) === "GeneratorFunction"
        : false;
    };
  
    exports.mark = function(genFun) {
      if (Object.setPrototypeOf) {
        Object.setPrototypeOf(genFun, GeneratorFunctionPrototype);
      } else {
        genFun.__proto__ = GeneratorFunctionPrototype;
        define(genFun, toStringTagSymbol, "GeneratorFunction");
      }
      genFun.prototype = Object.create(Gp);
      return genFun;
    };
  
    // Within the body of any async function, `await x` is transformed to
    // `yield regeneratorRuntime.awrap(x)`, so that the runtime can test
    // `hasOwn.call(value, "__await")` to determine if the yielded value is
    // meant to be awaited.
    exports.awrap = function(arg) {
      return { __await: arg };
    };
  
    function AsyncIterator(generator, PromiseImpl) {
      function invoke(method, arg, resolve, reject) {
        var record = tryCatch(generator[method], generator, arg);
        if (record.type === "throw") {
          reject(record.arg);
        } else {
          var result = record.arg;
          var value = result.value;
          if (value &&
              typeof value === "object" &&
              hasOwn.call(value, "__await")) {
            return PromiseImpl.resolve(value.__await).then(function(value) {
              invoke("next", value, resolve, reject);
            }, function(err) {
              invoke("throw", err, resolve, reject);
            });
          }
  
          return PromiseImpl.resolve(value).then(function(unwrapped) {
            // When a yielded Promise is resolved, its final value becomes
            // the .value of the Promise<{value,done}> result for the
            // current iteration.
            result.value = unwrapped;
            resolve(result);
          }, function(error) {
            // If a rejected Promise was yielded, throw the rejection back
            // into the async generator function so it can be handled there.
            return invoke("throw", error, resolve, reject);
          });
        }
      }
  
      var previousPromise;
  
      function enqueue(method, arg) {
        function callInvokeWithMethodAndArg() {
          return new PromiseImpl(function(resolve, reject) {
            invoke(method, arg, resolve, reject);
          });
        }
  
        return previousPromise =
          // If enqueue has been called before, then we want to wait until
          // all previous Promises have been resolved before calling invoke,
          // so that results are always delivered in the correct order. If
          // enqueue has not been called before, then it is important to
          // call invoke immediately, without waiting on a callback to fire,
          // so that the async generator function has the opportunity to do
          // any necessary setup in a predictable way. This predictability
          // is why the Promise constructor synchronously invokes its
          // executor callback, and why async functions synchronously
          // execute code before the first await. Since we implement simple
          // async functions in terms of async generators, it is especially
          // important to get this right, even though it requires care.
          previousPromise ? previousPromise.then(
            callInvokeWithMethodAndArg,
            // Avoid propagating failures to Promises returned by later
            // invocations of the iterator.
            callInvokeWithMethodAndArg
          ) : callInvokeWithMethodAndArg();
      }
  
      // Define the unified helper method that is used to implement .next,
      // .throw, and .return (see defineIteratorMethods).
      this._invoke = enqueue;
    }
  
    defineIteratorMethods(AsyncIterator.prototype);
    AsyncIterator.prototype[asyncIteratorSymbol] = function () {
      return this;
    };
    exports.AsyncIterator = AsyncIterator;
  
    // Note that simple async functions are implemented on top of
    // AsyncIterator objects; they just return a Promise for the value of
    // the final result produced by the iterator.
    exports.async = function(innerFn, outerFn, self, tryLocsList, PromiseImpl) {
      if (PromiseImpl === void 0) PromiseImpl = Promise;
  
      var iter = new AsyncIterator(
        wrap(innerFn, outerFn, self, tryLocsList),
        PromiseImpl
      );
  
      return exports.isGeneratorFunction(outerFn)
        ? iter // If outerFn is a generator, return the full iterator.
        : iter.next().then(function(result) {
            return result.done ? result.value : iter.next();
          });
    };
  
    function makeInvokeMethod(innerFn, self, context) {
      var state = GenStateSuspendedStart;
  
      return function invoke(method, arg) {
        if (state === GenStateExecuting) {
          throw new Error("Generator is already running");
        }
  
        if (state === GenStateCompleted) {
          if (method === "throw") {
            throw arg;
          }
  
          // Be forgiving, per 25.3.3.3.3 of the spec:
          // https://people.mozilla.org/~jorendorff/es6-draft.html#sec-generatorresume
          return doneResult();
        }
  
        context.method = method;
        context.arg = arg;
  
        while (true) {
          var delegate = context.delegate;
          if (delegate) {
            var delegateResult = maybeInvokeDelegate(delegate, context);
            if (delegateResult) {
              if (delegateResult === ContinueSentinel) continue;
              return delegateResult;
            }
          }
  
          if (context.method === "next") {
            // Setting context._sent for legacy support of Babel's
            // function.sent implementation.
            context.sent = context._sent = context.arg;
  
          } else if (context.method === "throw") {
            if (state === GenStateSuspendedStart) {
              state = GenStateCompleted;
              throw context.arg;
            }
  
            context.dispatchException(context.arg);
  
          } else if (context.method === "return") {
            context.abrupt("return", context.arg);
          }
  
          state = GenStateExecuting;
  
          var record = tryCatch(innerFn, self, context);
          if (record.type === "normal") {
            // If an exception is thrown from innerFn, we leave state ===
            // GenStateExecuting and loop back for another invocation.
            state = context.done
              ? GenStateCompleted
              : GenStateSuspendedYield;
  
            if (record.arg === ContinueSentinel) {
              continue;
            }
  
            return {
              value: record.arg,
              done: context.done
            };
  
          } else if (record.type === "throw") {
            state = GenStateCompleted;
            // Dispatch the exception by looping back around to the
            // context.dispatchException(context.arg) call above.
            context.method = "throw";
            context.arg = record.arg;
          }
        }
      };
    }
  
    // Call delegate.iterator[context.method](context.arg) and handle the
    // result, either by returning a { value, done } result from the
    // delegate iterator, or by modifying context.method and context.arg,
    // setting context.delegate to null, and returning the ContinueSentinel.
    function maybeInvokeDelegate(delegate, context) {
      var method = delegate.iterator[context.method];
      if (method === undefined) {
        // A .throw or .return when the delegate iterator has no .throw
        // method always terminates the yield* loop.
        context.delegate = null;
  
        if (context.method === "throw") {
          // Note: ["return"] must be used for ES3 parsing compatibility.
          if (delegate.iterator["return"]) {
            // If the delegate iterator has a return method, give it a
            // chance to clean up.
            context.method = "return";
            context.arg = undefined;
            maybeInvokeDelegate(delegate, context);
  
            if (context.method === "throw") {
              // If maybeInvokeDelegate(context) changed context.method from
              // "return" to "throw", let that override the TypeError below.
              return ContinueSentinel;
            }
          }
  
          context.method = "throw";
          context.arg = new TypeError(
            "The iterator does not provide a 'throw' method");
        }
  
        return ContinueSentinel;
      }
  
      var record = tryCatch(method, delegate.iterator, context.arg);
  
      if (record.type === "throw") {
        context.method = "throw";
        context.arg = record.arg;
        context.delegate = null;
        return ContinueSentinel;
      }
  
      var info = record.arg;
  
      if (! info) {
        context.method = "throw";
        context.arg = new TypeError("iterator result is not an object");
        context.delegate = null;
        return ContinueSentinel;
      }
  
      if (info.done) {
        // Assign the result of the finished delegate to the temporary
        // variable specified by delegate.resultName (see delegateYield).
        context[delegate.resultName] = info.value;
  
        // Resume execution at the desired location (see delegateYield).
        context.next = delegate.nextLoc;
  
        // If context.method was "throw" but the delegate handled the
        // exception, let the outer generator proceed normally. If
        // context.method was "next", forget context.arg since it has been
        // "consumed" by the delegate iterator. If context.method was
        // "return", allow the original .return call to continue in the
        // outer generator.
        if (context.method !== "return") {
          context.method = "next";
          context.arg = undefined;
        }
  
      } else {
        // Re-yield the result returned by the delegate method.
        return info;
      }
  
      // The delegate iterator is finished, so forget it and continue with
      // the outer generator.
      context.delegate = null;
      return ContinueSentinel;
    }
  
    // Define Generator.prototype.{next,throw,return} in terms of the
    // unified ._invoke helper method.
    defineIteratorMethods(Gp);
  
    define(Gp, toStringTagSymbol, "Generator");
  
    // A Generator should always return itself as the iterator object when the
    // @@iterator function is called on it. Some browsers' implementations of the
    // iterator prototype chain incorrectly implement this, causing the Generator
    // object to not be returned from this call. This ensures that doesn't happen.
    // See https://github.com/facebook/regenerator/issues/274 for more details.
    Gp[iteratorSymbol] = function() {
      return this;
    };
  
    Gp.toString = function() {
      return "[object Generator]";
    };
  
    function pushTryEntry(locs) {
      var entry = { tryLoc: locs[0] };
  
      if (1 in locs) {
        entry.catchLoc = locs[1];
      }
  
      if (2 in locs) {
        entry.finallyLoc = locs[2];
        entry.afterLoc = locs[3];
      }
  
      this.tryEntries.push(entry);
    }
  
    function resetTryEntry(entry) {
      var record = entry.completion || {};
      record.type = "normal";
      delete record.arg;
      entry.completion = record;
    }
  
    function Context(tryLocsList) {
      // The root entry object (effectively a try statement without a catch
      // or a finally block) gives us a place to store values thrown from
      // locations where there is no enclosing try statement.
      this.tryEntries = [{ tryLoc: "root" }];
      tryLocsList.forEach(pushTryEntry, this);
      this.reset(true);
    }
  
    exports.keys = function(object) {
      var keys = [];
      for (var key in object) {
        keys.push(key);
      }
      keys.reverse();
  
      // Rather than returning an object with a next method, we keep
      // things simple and return the next function itself.
      return function next() {
        while (keys.length) {
          var key = keys.pop();
          if (key in object) {
            next.value = key;
            next.done = false;
            return next;
          }
        }
  
        // To avoid creating an additional object, we just hang the .value
        // and .done properties off the next function object itself. This
        // also ensures that the minifier will not anonymize the function.
        next.done = true;
        return next;
      };
    };
  
    function values(iterable) {
      if (iterable) {
        var iteratorMethod = iterable[iteratorSymbol];
        if (iteratorMethod) {
          return iteratorMethod.call(iterable);
        }
  
        if (typeof iterable.next === "function") {
          return iterable;
        }
  
        if (!isNaN(iterable.length)) {
          var i = -1, next = function next() {
            while (++i < iterable.length) {
              if (hasOwn.call(iterable, i)) {
                next.value = iterable[i];
                next.done = false;
                return next;
              }
            }
  
            next.value = undefined;
            next.done = true;
  
            return next;
          };
  
          return next.next = next;
        }
      }
  
      // Return an iterator with no values.
      return { next: doneResult };
    }
    exports.values = values;
  
    function doneResult() {
      return { value: undefined, done: true };
    }
  
    Context.prototype = {
      constructor: Context,
  
      reset: function(skipTempReset) {
        this.prev = 0;
        this.next = 0;
        // Resetting context._sent for legacy support of Babel's
        // function.sent implementation.
        this.sent = this._sent = undefined;
        this.done = false;
        this.delegate = null;
  
        this.method = "next";
        this.arg = undefined;
  
        this.tryEntries.forEach(resetTryEntry);
  
        if (!skipTempReset) {
          for (var name in this) {
            // Not sure about the optimal order of these conditions:
            if (name.charAt(0) === "t" &&
                hasOwn.call(this, name) &&
                !isNaN(+name.slice(1))) {
              this[name] = undefined;
            }
          }
        }
      },
  
      stop: function() {
        this.done = true;
  
        var rootEntry = this.tryEntries[0];
        var rootRecord = rootEntry.completion;
        if (rootRecord.type === "throw") {
          throw rootRecord.arg;
        }
  
        return this.rval;
      },
  
      dispatchException: function(exception) {
        if (this.done) {
          throw exception;
        }
  
        var context = this;
        function handle(loc, caught) {
          record.type = "throw";
          record.arg = exception;
          context.next = loc;
  
          if (caught) {
            // If the dispatched exception was caught by a catch block,
            // then let that catch block handle the exception normally.
            context.method = "next";
            context.arg = undefined;
          }
  
          return !! caught;
        }
  
        for (var i = this.tryEntries.length - 1; i >= 0; --i) {
          var entry = this.tryEntries[i];
          var record = entry.completion;
  
          if (entry.tryLoc === "root") {
            // Exception thrown outside of any try block that could handle
            // it, so set the completion value of the entire function to
            // throw the exception.
            return handle("end");
          }
  
          if (entry.tryLoc <= this.prev) {
            var hasCatch = hasOwn.call(entry, "catchLoc");
            var hasFinally = hasOwn.call(entry, "finallyLoc");
  
            if (hasCatch && hasFinally) {
              if (this.prev < entry.catchLoc) {
                return handle(entry.catchLoc, true);
              } else if (this.prev < entry.finallyLoc) {
                return handle(entry.finallyLoc);
              }
  
            } else if (hasCatch) {
              if (this.prev < entry.catchLoc) {
                return handle(entry.catchLoc, true);
              }
  
            } else if (hasFinally) {
              if (this.prev < entry.finallyLoc) {
                return handle(entry.finallyLoc);
              }
  
            } else {
              throw new Error("try statement without catch or finally");
            }
          }
        }
      },
  
      abrupt: function(type, arg) {
        for (var i = this.tryEntries.length - 1; i >= 0; --i) {
          var entry = this.tryEntries[i];
          if (entry.tryLoc <= this.prev &&
              hasOwn.call(entry, "finallyLoc") &&
              this.prev < entry.finallyLoc) {
            var finallyEntry = entry;
            break;
          }
        }
  
        if (finallyEntry &&
            (type === "break" ||
             type === "continue") &&
            finallyEntry.tryLoc <= arg &&
            arg <= finallyEntry.finallyLoc) {
          // Ignore the finally entry if control is not jumping to a
          // location outside the try/catch block.
          finallyEntry = null;
        }
  
        var record = finallyEntry ? finallyEntry.completion : {};
        record.type = type;
        record.arg = arg;
  
        if (finallyEntry) {
          this.method = "next";
          this.next = finallyEntry.finallyLoc;
          return ContinueSentinel;
        }
  
        return this.complete(record);
      },
  
      complete: function(record, afterLoc) {
        if (record.type === "throw") {
          throw record.arg;
        }
  
        if (record.type === "break" ||
            record.type === "continue") {
          this.next = record.arg;
        } else if (record.type === "return") {
          this.rval = this.arg = record.arg;
          this.method = "return";
          this.next = "end";
        } else if (record.type === "normal" && afterLoc) {
          this.next = afterLoc;
        }
  
        return ContinueSentinel;
      },
  
      finish: function(finallyLoc) {
        for (var i = this.tryEntries.length - 1; i >= 0; --i) {
          var entry = this.tryEntries[i];
          if (entry.finallyLoc === finallyLoc) {
            this.complete(entry.completion, entry.afterLoc);
            resetTryEntry(entry);
            return ContinueSentinel;
          }
        }
      },
  
      "catch": function(tryLoc) {
        for (var i = this.tryEntries.length - 1; i >= 0; --i) {
          var entry = this.tryEntries[i];
          if (entry.tryLoc === tryLoc) {
            var record = entry.completion;
            if (record.type === "throw") {
              var thrown = record.arg;
              resetTryEntry(entry);
            }
            return thrown;
          }
        }
  
        // The context.catch method must only be called with a location
        // argument that corresponds to a known catch block.
        throw new Error("illegal catch attempt");
      },
  
      delegateYield: function(iterable, resultName, nextLoc) {
        this.delegate = {
          iterator: values(iterable),
          resultName: resultName,
          nextLoc: nextLoc
        };
  
        if (this.method === "next") {
          // Deliberately forget the last sent value so that we don't
          // accidentally pass it on to the delegate.
          this.arg = undefined;
        }
  
        return ContinueSentinel;
      }
    };
  
    // Regardless of whether this script is executing as a CommonJS module
    // or not, return the runtime object so that we can declare the variable
    // regeneratorRuntime in the outer scope, which allows this module to be
    // injected easily by `bin/regenerator --include-runtime script.js`.
    return exports;
  
  }(
    // If this script is executing as a CommonJS module, use module.exports
    // as the regeneratorRuntime namespace. Otherwise create a new empty
    // object. Either way, the resulting object will be used to initialize
    // the regeneratorRuntime variable at the top of this file.
    typeof module === "object" ? module.exports : {}
  ));
  
  try {
    regeneratorRuntime = runtime;
  } catch (accidentalStrictMode) {
    // This module should not be running in strict mode, so the above
    // assignment should always work unless something is misconfigured. Just
    // in case runtime.js accidentally runs in strict mode, we can escape
    // strict mode using a global Function call. This could conceivably fail
    // if a Content Security Policy forbids using Function, but in that case
    // the proper solution is to fix the accidental strict mode problem. If
    // you've misconfigured your bundler to force strict mode and applied a
    // CSP to forbid Function, and you're not willing to fix either of those
    // problems, please detail your unique predicament in a GitHub issue.
    Function("r", "regeneratorRuntime = r")(runtime);
  }
  
  },{}],"templates/content/custom-html.js":[function(require,module,exports) {
  "use strict";
  
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.customHtml = void 0;
  
  function customHtml(content) {
    var custom_html = "\n        <section>\n          " + content.customHtml + "\n      </section>\n";
    return custom_html;
  }
  
  exports.customHtml = customHtml;
  },{}],"templates/content/newsletter.js":[function(require,module,exports) {
  "use strict";
  
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.newsletter = void 0;
  
  var newsletter = function (style, content) {
    var success;
    var url = window.location.href;
  
    if (url.includes("?customer_posted=true")) {
      success = "yes";
    } else if (url.includes("t?contact%5Btags%5D=prospect%2Cnewsletter&form_type=customer")) {
      success = "no";
    }
  
    var news = "\n    <section>\n    <div class=\"tw-flex tw-flex-row tw-flex-wrap tw-justify-center\">\n\n      " + (content.imgUrl !== "" ? "\n      <div class=\"tw-w-full sm:tw-w-1/2\">\n        <div>\n          <img class=\"ezy-style-modal__content__image\" src=\"" + content.imgUrl + "\" />\n        </div>\n      </div>" : "") + "\n  \n      <div\n        class=\"tw-w-full sm:tw-w-1/2 tw-max-w-prose tw-flex tw-flex-grow tw-justify-center tw-items-center tw-p-4 tw-md:p-8\"\n      >\n        <div>\n          <h3 class=\"ezy-type__headline--bold-1 tw-mb-2\">\n            " + content.headline + "\n          </h3>\n          <p class=\"tw-mb-4\">" + content.body + "</p>\n          <form\n            method=\"post\"\n            action=\"/contact#contact_form\"\n            id=\"contact_form\"\n            accept-charset=\"UTF-8\"\n            class=\"contact-form\"\n          >\n            <input type=\"hidden\" name=\"form_type\" value=\"customer\" /><input\n              type=\"hidden\"\n              name=\"utf8\"\n              value=\"\u2713\"\n            />\n            <input\n              id=\"contact_tags\"\n              name=\"contact[tags]\"\n              type=\"hidden\"\n              value=\"prospect,newsletter\"\n            />\n  \n            <input\n              class=\"tw-mb-2\"\n              id=\"contact_email\"\n              name=\"contact[email]\"\n              type=\"email\"\n            />\n  \n            <input\n              style=\"\n  background-color: " + style.primaryButtonColor + ";\n  border-radius: " + style.borderRadius + "px;\n  \"\n              class=\"ezy-btn tw-w-full\"\n              type=\"submit\"\n              value=\"" + content.buttonText + "\"\n            />\n            " + (success === "yes" ? "\n                <div class=\"tw-bg-black tw-bg-opacity-10 tw-mt-2 tw-p-2\"\n                style=\"border-radius:" + style.borderRadius + ";\">\n                " + content.successMessage + "\n            " : "") + " " + (success === "no" ? "\n      \n      <div class=\"tw-bg-black tw-bg-opacity-10 tw-mt-2 tw-p-2\"\n      style=\"border-radius:" + style.borderRadius + ";\">\n      " + content.failureMessage + "\n    </div>\n            " : "") + "\n          </form>\n        </div>\n      </div>\n    </div>\n  </section>";
    return news;
  };
  
  exports.newsletter = newsletter;
  },{}],"templates/content/product-feed.js":[function(require,module,exports) {
  "use strict";
  
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.productFeed = void 0;
  
  function productFeed(style, content, products) {
    var product_feed = "\n          <!-- CONTENT -->\n    <div class=\"tw-flex tw-flex-row tw-flex-wrap\">\n    <div class=\"tw-w-full sm:tw-w-full tw-flex tw-justify-center tw-items-center\">\n      <div class=\"tw-overflow-hidden\">\n        <div class=\"tw-p-4 tw-max-w-prose\">\n          <h3 class=\"ezy-type__headline--bold-1\">" + content.headline + "</h3>\n          <p>\n          " + content.body + "\n          </p>\n        </div>\n        <div class=\"ezy-type-productfeed__arrows\">\n          <div class=\"ezy-type-productfeed__back\">\n            <button class=\"js:ezy-scrollArrowButtons\" data-scroll-direction=\"0\" data-scroll-container=\"ezy-type-productfeed\">\n              <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\" class=\"feather feather-arrow-left ezy-btn--round\"><line x1=\"19\" y1=\"12\" x2=\"5\" y2=\"12\"></line><polyline points=\"12 19 5 12 12 5\"></polyline></svg>\n            </button>\n          </div>\n          <div class=\"ezy-type-productfeed__next\">\n            <button class=\"js:ezy-scrollArrowButtons\" data-scroll-direction=\"1\" data-scroll-container=\"ezy-type-productfeed\">\n              <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\" class=\"feather feather-arrow-right ezy-btn--round\"><line x1=\"5\" y1=\"12\" x2=\"19\" y2=\"12\"></line><polyline points=\"12 5 19 12 12 19\"></polyline></svg>\n            </button>\n          </div>\n        </div>\n        <div class=\"ezy-type-productfeed\">\n          " + products.map(function (product) {
      return "\n            <div class=\"ezy-type-productfeed__item\">\n            <img class=\"image--square\" src=" + product.images[0].originalSrc + "/>\n            <div class=\"tw-px-2 tw-py-4\">\n              <p>" + product.title + "</p>\n              <p class=\"tw-pb-2\">$<span class=\"tw-pb-2 js:ezy-productPrice\">" + product.variants[0].price + "</span></p>\n              <select id=\"id\" name=\"id\" class=\"ezy-select tw-mb-2 js:ezy-changeVariantSelects\">\n                " + product.variants.map(function (variant) {
        return "<option value=\"" + variant.id.split("gid://shopify/ProductVariant/").pop().split("/")[0] + "\" data-variant-availability=\"" + variant.availableForSale + "\" data-variant-price=\"" + variant.price + "\">" + variant.title + "</option>";
      }) + "\n              </select>\n              <button class=\"ezy-btn js:ezy-addVariantButtons tw-w-full\" style=\"background-color:" + style.primaryButtonColor + "\" data-variant-id=\"" + product.variants[0].price + "\">\n                <span class=\"ezy-btn__text\">\n                  Add to cart\n                </span>\n                <span class=\"ezy-btn__spinner\">\n                  <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\" class=\"feather feather-loader\"><line x1=\"12\" y1=\"2\" x2=\"12\" y2=\"6\"></line><line x1=\"12\" y1=\"18\" x2=\"12\" y2=\"22\"></line><line x1=\"4.93\" y1=\"4.93\" x2=\"7.76\" y2=\"7.76\"></line><line x1=\"16.24\" y1=\"16.24\" x2=\"19.07\" y2=\"19.07\"></line><line x1=\"2\" y1=\"12\" x2=\"6\" y2=\"12\"></line><line x1=\"18\" y1=\"12\" x2=\"22\" y2=\"12\"></line><line x1=\"4.93\" y1=\"19.07\" x2=\"7.76\" y2=\"16.24\"></line><line x1=\"16.24\" y1=\"7.76\" x2=\"19.07\" y2=\"4.93\"></line></svg>\n                </button>\n              </a>\n            </div>\n          </div>";
    }) + "\n        </div>\n      </div>\n    </div>\n    </div>\n";
    return product_feed;
  }
  
  exports.productFeed = productFeed;
  },{}],"templates/content/progress-bar.js":[function(require,module,exports) {
  "use strict";
  
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.cartProgressBar = void 0;
  
  var cartProgressBar = function (style, content, cartData) {
    var cartProgress;
  
    if (cartData.total_price === 0) {
      cartProgress = 0;
    } else {
      cartProgress = cartData.total_price / 100 / content.cartGoalValue * 100;
    }
  
    var remainder = cartData.total_price / 100 - content.cartGoalValue;
    var cart_progress_bar = "\n\n  <section>\n  <div class=\"tw-flex tw-flex-row tw-flex-wrap tw-justify-center\">\n    <div class=\"tw-w-full sm:tw-w-1/2 tw-max-w-prose tw-flex tw-flex-grow tw-justify-center tw-items-center\">\n      <div class=\"tw-w-full\">\n\n        <section class=\"tw-border-b tw-border-gray-200 tw-p-4\">\n        " + (remainder < 0 ? "You're $" + -remainder + " away from " + content.cartGoalPrize + "." : "" + content.cartSuccessMessage) + "\n          <div class=\"ezy-progressbar\"\n            style=\"\n              border-radius:" + style.borderRadius + "px;\">\n            <div class=\"ezy-progressbar__inner\" style=\"width:" + cartProgress + "%; background-color:" + style.primaryButtonColor + ";\">\n            </div>\n          </div>\n        </section>\n\n        <section class=\"tw-p-4 tw-md:p-8\">\n          <h3 class=\"ezy-type__headline--bold-1 tw-mb-2\">" + content.headline + "</h3>\n          <p class=\"tw-mb-4\">\n            " + content.body + "\n          </p>\n          " + (content.buttonText != "" ? "<a class=\"ezy-btn tw-w-full main-btn\" href=\"" + content.buttonUrl + "\"\n          style=\"\n            background-color:" + style.primaryButtonColor + ";\n            border-radius:" + style.borderRadius + "px;\">\n            " + content.buttonText + "\n        </a>" : "") + "\n          \n        </section>\n\n      </div>\n    </div>\n  </div>\n</section>\n\n  ";
    return cart_progress_bar;
  };
  
  exports.cartProgressBar = cartProgressBar;
  },{}],"templates/content/text-image.js":[function(require,module,exports) {
  "use strict";
  
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.textImage = void 0;
  
  function textImage(style, content) {
    var text_image = "\n  <section>\n  <div class=\"tw-flex tw-flex-row tw-flex-wrap tw-justify-center\">\n  " + (content.imgUrl !== "" ? "<div class=\"tw-w-full sm:tw-w-1/2\">\n  <div>\n    <img class=\"ezy-style-modal__content__image\" src=\"" + content.imgUrl + "\"/>\n  </div>\n  </div> " : "") + "\n    <div class=\"tw-w-full sm:tw-w-1/2 tw-max-w-prose tw-flex tw-flex-grow tw-justify-center tw-items-center tw-p-4 tw-md:p-8\">\n      <div>\n        <h3 class=\"ezy-type__headline--bold-1 tw-mb-2\">" + content.headline + "</h3>\n        <p class=\"tw-mb-4\">\n        " + content.body + "\n        </p>\n        " + (content.buttonText != "" ? " <a class=\"ezy-btn tw-w-full main-btn\" href=\"" + content.buttonUrl + "\"\n        style=\"\n          background-color:" + style.primaryButtonColor + ";\n          border-radius:" + style.borderRadius + "px;\">" + content.buttonText + "</a>" : "") + "\n       \n      </div>\n    </div>\n  </div>\n  </section>\n";
    return text_image;
  }
  
  exports.textImage = textImage;
  },{}],"templates/style/modal.js":[function(require,module,exports) {
  "use strict";
  
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.modalTemplate = void 0;
  
  var custom_html_1 = require("../content/custom-html");
  
  var newsletter_1 = require("../content/newsletter");
  
  var product_feed_1 = require("../content/product-feed");
  
  var progress_bar_1 = require("../content/progress-bar");
  
  var text_image_1 = require("../content/text-image");
  
  var modalTemplate = function (style, content, freePlan, products, cartData) {
    var contentTemplate;
  
    if (content.contentType === "text-image") {
      contentTemplate = text_image_1.textImage(style, content);
    } else if (content.contentType === "product-feed") {
      contentTemplate = product_feed_1.productFeed(style, content, products);
    } else if (content.contentType === "newsletter") {
      contentTemplate = newsletter_1.newsletter(style, content);
    } else if (content.contentType === "cart-progress-bar") {
      contentTemplate = progress_bar_1.cartProgressBar(style, content, cartData);
    } else if (content.contentType === "custom-html") {
      contentTemplate = custom_html_1.customHtml(content);
    }
  
    var modal_templ = "\n    <section class=\"ezy-style-modal__window\">\n      <section class=\"ezy-style-modal__close\">\n        <a href=\"#\" title=\"Close popup modal\" class='closeBtn'\">\n          <svg\n            xmlns=\"http://www.w3.org/2000/svg\"\n            width=\"24\"\n            height=\"24\"\n            viewBox=\"0 0 24 24\"\n            fill=\"none\"\n            stroke=\"currentColor\"\n            stroke-width=\"2\"\n            stroke-linecap=\"round\"\n            stroke-linejoin=\"round\"\n            class=\"feather feather-x ezy-btn--round--inverted\"\n          >\n            <line x1=\"18\" y1=\"6\" x2=\"6\" y2=\"18\"></line>\n            <line x1=\"6\" y1=\"6\" x2=\"18\" y2=\"18\"></line>\n          </svg>\n        </a>\n      </section>\n      <section\n        class=\"ezy-style-modal__content\"\n        style=\"\n          background-color: " + style.backgroundColor + ";\n          border-radius: " + style.borderRadius + "px;\n        \"\n      >\n        <section>" + contentTemplate + "</section>\n      </section>\n    </section>\n    " + (!freePlan ? "" : "<a href=\"https://brickspacelab.com/\" target=\"_blank\" class=\"ezy-tooltip tw-absolute tw-bottom-2 tw-left-2\">\n    <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\" class=\"feather feather-info\"><circle cx=\"12\" cy=\"12\" r=\"10\"></circle><line x1=\"12\" y1=\"16\" x2=\"12\" y2=\"12\"></line><line x1=\"12\" y1=\"8\" x2=\"12.01\" y2=\"8\"></line></svg>\n    <span>Powered by Easypop</span>\n    </a>") + "\n  ";
    return modal_templ;
  };
  
  exports.modalTemplate = modalTemplate;
  },{"../content/custom-html":"templates/content/custom-html.js","../content/newsletter":"templates/content/newsletter.js","../content/product-feed":"templates/content/product-feed.js","../content/progress-bar":"templates/content/progress-bar.js","../content/text-image":"templates/content/text-image.js"}],"templates/style/fullscreen.js":[function(require,module,exports) {
  "use strict";
  
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.fullscreenTemplate = void 0;
  
  var custom_html_1 = require("../content/custom-html");
  
  var newsletter_1 = require("../content/newsletter");
  
  var product_feed_1 = require("../content/product-feed");
  
  var progress_bar_1 = require("../content/progress-bar");
  
  var text_image_1 = require("../content/text-image");
  
  var fullscreenTemplate = function (style, content, freePlan, products, cartData) {
    var contentTemplate;
  
    if (content.contentType === "text-image") {
      contentTemplate = text_image_1.textImage(style, content);
    } else if (content.contentType === "product-feed") {
      contentTemplate = product_feed_1.productFeed(style, content, products);
    } else if (content.contentType === "newsletter") {
      contentTemplate = newsletter_1.newsletter(style, content);
    } else if (content.contentType === "cart-progress-bar") {
      contentTemplate = progress_bar_1.cartProgressBar(style, content, cartData);
    } else if (content.contentType === "custom-html") {
      contentTemplate = custom_html_1.customHtml(content);
    }
  
    var fullscreen_templ = "\n    <section class=\"ezy-style-fullscreen__close\">\n    <a href=\"#\" title=\"Close fullscreen popup\" class=\"closeBtn\">\n        <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\" class=\"feather feather-x ezy-btn--round\"><line x1=\"18\" y1=\"6\" x2=\"6\" y2=\"18\"></line><line x1=\"6\" y1=\"6\" x2=\"18\" y2=\"18\"></line></svg>\n    </a>\n    </section>\n    <section class=\"ezy-style-fullscreen__window\">\n    <section class=\"ezy-style-fullscreen__content\">\n        " + contentTemplate + "\n    </section>\n    </section>\n    " + (!freePlan ? "" : "<a href=\"https://brickspacelab.com/\" target=\"_blank\" class=\"ezy-tooltip tw-absolute tw-bottom-2 tw-left-2\">\n    <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\" class=\"feather feather-info\"><circle cx=\"12\" cy=\"12\" r=\"10\"></circle><line x1=\"12\" y1=\"16\" x2=\"12\" y2=\"12\"></line><line x1=\"12\" y1=\"8\" x2=\"12.01\" y2=\"8\"></line></svg>\n    <span>Powered by Easypop</span>\n    </a>") + "\n    \n  ";
    return fullscreen_templ;
  };
  
  exports.fullscreenTemplate = fullscreenTemplate;
  },{"../content/custom-html":"templates/content/custom-html.js","../content/newsletter":"templates/content/newsletter.js","../content/product-feed":"templates/content/product-feed.js","../content/progress-bar":"templates/content/progress-bar.js","../content/text-image":"templates/content/text-image.js"}],"templates/style/box.js":[function(require,module,exports) {
  "use strict";
  
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.boxTemplate = void 0;
  
  var custom_html_1 = require("../content/custom-html");
  
  var newsletter_1 = require("../content/newsletter");
  
  var product_feed_1 = require("../content/product-feed");
  
  var progress_bar_1 = require("../content/progress-bar");
  
  var text_image_1 = require("../content/text-image");
  
  var boxTemplate = function (style, content, freePlan, products, cartData) {
    var contentTemplate;
  
    if (content.contentType === "text-image") {
      contentTemplate = text_image_1.textImage(style, content);
    } else if (content.contentType === "product-feed") {
      contentTemplate = product_feed_1.productFeed(style, content, products);
    } else if (content.contentType === "newsletter") {
      contentTemplate = newsletter_1.newsletter(style, content);
    } else if (content.contentType === "cart-progress-bar") {
      contentTemplate = progress_bar_1.cartProgressBar(style, content, cartData);
    } else if (content.contentType === "custom-html") {
      contentTemplate = custom_html_1.customHtml(content);
    }
  
    var box_templ = "\n  <section class=\"ezy-style-box__window\">\n    <div class=\"ezy-style-box__close tw-flex tw-flex-wrap tw-justify-center\">\n      <div class=\"tw-flex-grow tw-flex tw-w-1/2\">\n      " + (!freePlan ? "" : "<a href=\"https://brickspacelab.com/\" target=\"_blank\" class=\"ezy-tooltip tw-absolute tw-bottom-2 tw-left-2\">\n      <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\" class=\"feather feather-info\"><circle cx=\"12\" cy=\"12\" r=\"10\"></circle><line x1=\"12\" y1=\"16\" x2=\"12\" y2=\"12\"></line><line x1=\"12\" y1=\"8\" x2=\"12.01\" y2=\"8\"></line></svg>\n      <span>Powered by Easypop</span>\n      </a>") + "\n      </div>\n      <div class=\"tw-flex-grow tw-w-1/2 tw-text-right\">\n        <a href=\"#\" title=\"Close popup\" class=\"closeBtn\">\n          <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\" class=\"feather feather-x ezy-btn--round--fill\"><line x1=\"18\" y1=\"6\" x2=\"6\" y2=\"18\"></line><line x1=\"6\" y1=\"6\" x2=\"18\" y2=\"18\"></line></svg>\n        </a>\n      </div>\n    </div>\n\n    <section class=\"ezy-style-box__content\" style=\"\n      background-color:" + style.backgroundColor + ";\n      border-radius:" + style.borderRadius + "\">\n      " + contentTemplate + "\n    </section>\n  </section>\n  ";
    return box_templ;
  };
  
  exports.boxTemplate = boxTemplate;
  },{"../content/custom-html":"templates/content/custom-html.js","../content/newsletter":"templates/content/newsletter.js","../content/product-feed":"templates/content/product-feed.js","../content/progress-bar":"templates/content/progress-bar.js","../content/text-image":"templates/content/text-image.js"}],"templates/style/drawer.js":[function(require,module,exports) {
  "use strict";
  
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.drawerTemplate = void 0;
  
  var custom_html_1 = require("../content/custom-html");
  
  var newsletter_1 = require("../content/newsletter");
  
  var product_feed_1 = require("../content/product-feed");
  
  var progress_bar_1 = require("../content/progress-bar");
  
  var text_image_1 = require("../content/text-image");
  
  var drawerTemplate = function (style, content, freePlan, products, cartData) {
    var contentTemplate;
  
    if (content.contentType === "text-image") {
      contentTemplate = text_image_1.textImage(style, content);
    } else if (content.contentType === "product-feed") {
      contentTemplate = product_feed_1.productFeed(style, content, products);
    } else if (content.contentType === "newsletter") {
      contentTemplate = newsletter_1.newsletter(style, content);
    } else if (content.contentType === "cart-progress-bar") {
      contentTemplate = progress_bar_1.cartProgressBar(style, content, cartData);
    } else if (content.contentType === "custom-html") {
      contentTemplate = custom_html_1.customHtml(content);
    }
  
    var drawer_templ = "\n  <section class=\"ezy-style-drawer__close\">\n  <a href=\"#\" title=\"Close drawer\" class=\"closeBtn\">\n    <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\" class=\"feather feather-x ezy-btn--round--inverted\"><line x1=\"18\" y1=\"6\" x2=\"6\" y2=\"18\"></line><line x1=\"6\" y1=\"6\" x2=\"18\" y2=\"18\"></line></svg>\n  </a>\n</section>\n<section class=\"ezy-style-drawer__window\"\n  style=\"\n    background-color:" + style.backgroundColor + ";\">\n  <section class=\"ezy-style-drawer__content\">\n    " + contentTemplate + "\n  </section>\n  " + (!freePlan ? "" : "<a href=\"https://brickspacelab.com/\" target=\"_blank\" class=\"ezy-tooltip tw-absolute tw-bottom-2 tw-left-2\">\n  <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\" class=\"feather feather-info\"><circle cx=\"12\" cy=\"12\" r=\"10\"></circle><line x1=\"12\" y1=\"16\" x2=\"12\" y2=\"12\"></line><line x1=\"12\" y1=\"8\" x2=\"12.01\" y2=\"8\"></line></svg>\n  <span>Powered by Easypop</span>\n  </a>") + "\n</section>\n  ";
    return drawer_templ;
  };
  
  exports.drawerTemplate = drawerTemplate;
  },{"../content/custom-html":"templates/content/custom-html.js","../content/newsletter":"templates/content/newsletter.js","../content/product-feed":"templates/content/product-feed.js","../content/progress-bar":"templates/content/progress-bar.js","../content/text-image":"templates/content/text-image.js"}],"index_live.js":[function(require,module,exports) {
  "use strict";
  
  var __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {
    function adopt(value) {
      return value instanceof P ? value : new P(function (resolve) {
        resolve(value);
      });
    }
  
    return new (P || (P = Promise))(function (resolve, reject) {
      function fulfilled(value) {
        try {
          step(generator.next(value));
        } catch (e) {
          reject(e);
        }
      }
  
      function rejected(value) {
        try {
          step(generator["throw"](value));
        } catch (e) {
          reject(e);
        }
      }
  
      function step(result) {
        result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
      }
  
      step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
  };
  
  var __generator = this && this.__generator || function (thisArg, body) {
    var _ = {
      label: 0,
      sent: function () {
        if (t[0] & 1) throw t[1];
        return t[1];
      },
      trys: [],
      ops: []
    },
        f,
        y,
        t,
        g;
    return g = {
      next: verb(0),
      "throw": verb(1),
      "return": verb(2)
    }, typeof Symbol === "function" && (g[Symbol.iterator] = function () {
      return this;
    }), g;
  
    function verb(n) {
      return function (v) {
        return step([n, v]);
      };
    }
  
    function step(op) {
      if (f) throw new TypeError("Generator is already executing.");
  
      while (_) try {
        if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
        if (y = 0, t) op = [op[0] & 2, t.value];
  
        switch (op[0]) {
          case 0:
          case 1:
            t = op;
            break;
  
          case 4:
            _.label++;
            return {
              value: op[1],
              done: false
            };
  
          case 5:
            _.label++;
            y = op[1];
            op = [0];
            continue;
  
          case 7:
            op = _.ops.pop();
  
            _.trys.pop();
  
            continue;
  
          default:
            if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {
              _ = 0;
              continue;
            }
  
            if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {
              _.label = op[1];
              break;
            }
  
            if (op[0] === 6 && _.label < t[1]) {
              _.label = t[1];
              t = op;
              break;
            }
  
            if (t && _.label < t[2]) {
              _.label = t[2];
  
              _.ops.push(op);
  
              break;
            }
  
            if (t[2]) _.ops.pop();
  
            _.trys.pop();
  
            continue;
        }
  
        op = body.call(thisArg, _);
      } catch (e) {
        op = [6, e];
        y = 0;
      } finally {
        f = t = 0;
      }
  
      if (op[0] & 5) throw op[1];
      return {
        value: op[0] ? op[1] : void 0,
        done: true
      };
    }
  };
  
  var _a;
  
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  
  require("regenerator-runtime/runtime");
  
  var modal_1 = require("./templates/style/modal");
  
  var fullscreen_1 = require("./templates/style/fullscreen");
  
  var box_1 = require("./templates/style/box");
  
  var drawer_1 = require("./templates/style/drawer"); // CART DATA FOR TESTING PURPOSES
  // let cartData = {
  //   item_count: 3,
  //   total_price: 300,
  //   items: [],
  // };
  // const fetchCartInfo: any = () => {
  //   console.log("TESTING CART");
  // };
  
  
  var ezshop = (_a = window.location.href.split("https://").pop()) === null || _a === void 0 ? void 0 : _a.split("/")[0];
  
  var fetchCampaignInfo = function () {
    return __awaiter(void 0, void 0, void 0, function () {
      var res, responseJson;
      return __generator(this, function (_a) {
        switch (_a.label) {
          case 0:
            return [4
            /*yield*/
            , fetch("https://easypop.herokuapp.com/api/campaigns/" + ezshop, {
              method: "GET",
              headers: {
                "Content-Type": "application/json"
              }
            })];
  
          case 1:
            res = _a.sent();
            return [4
            /*yield*/
            , res.json()];
  
          case 2:
            responseJson = _a.sent();
            return [2
            /*return*/
            , responseJson.data];
        }
      });
    });
  };
  
  var fetchCartInfo = function () {
    return __awaiter(void 0, void 0, void 0, function () {
      var res, responseJson;
      return __generator(this, function (_a) {
        switch (_a.label) {
          case 0:
            return [4
            /*yield*/
            , fetch("/cart.js", {
              method: "GET",
              headers: {
                "Content-Type": "application/json"
              }
            })];
  
          case 1:
            res = _a.sent();
            return [4
            /*yield*/
            , res.json()];
  
          case 2:
            responseJson = _a.sent();
            return [2
            /*return*/
            , responseJson];
        }
      });
    });
  }; // MUTATION OBSERVER TO WATCH FOR CLASS CHANGES
  
  
  var ClassWatcher =
  /** @class */
  function () {
    function ClassWatcher(targetNode, classToWatch, classAddedCallback, classRemovedCallback) {
      var _this = this;
  
      this.mutationCallback = function (mutationsList) {
        for (var _i = 0, mutationsList_1 = mutationsList; _i < mutationsList_1.length; _i++) {
          var mutation = mutationsList_1[_i];
  
          if (mutation.type === "attributes" && mutation.attributeName === "class") {
            var currentClassState = mutation.target.classList.contains(_this.classToWatch);
  
            if (_this.lastClassState !== currentClassState) {
              _this.lastClassState = currentClassState;
  
              if (currentClassState) {
                _this.classAddedCallback();
              } else {
                _this.classRemovedCallback();
              }
            }
          }
        }
      };
  
      this.targetNode = targetNode;
      this.classToWatch = classToWatch;
      this.classAddedCallback = classAddedCallback;
      this.classRemovedCallback = classRemovedCallback;
      this.observer = null;
      this.lastClassState = targetNode.classList.contains(this.classToWatch);
      this.init();
    }
  
    ClassWatcher.prototype.init = function () {
      this.observer = new MutationObserver(this.mutationCallback);
      this.observe();
    };
  
    ClassWatcher.prototype.observe = function () {
      this.observer.observe(this.targetNode, {
        attributes: true
      });
    };
  
    ClassWatcher.prototype.disconnect = function () {
      this.observer.disconnect();
    };
  
    return ClassWatcher;
  }();
  
  var campaignInfo = function () {
    return __awaiter(void 0, void 0, void 0, function () {
      var campData, cartData_1, err_1;
      return __generator(this, function (_a) {
        switch (_a.label) {
          case 0:
            _a.trys.push([0, 3,, 4]);
  
            return [4
            /*yield*/
            , fetchCampaignInfo()];
  
          case 1:
            campData = _a.sent();
            return [4
            /*yield*/
            , fetchCartInfo()];
  
          case 2:
            cartData_1 = _a.sent();
            console.log(cartData_1);
            campData.forEach(function (campaign) {
              console.log(campaign);
              var freePlan = campaign.freePlan,
                  style = campaign.style,
                  content = campaign.content,
                  settings = campaign.settings,
                  _id = campaign._id,
                  createdAt = campaign.createdAt;
              var triggers = settings.triggers,
                  triggerMatch = settings.triggerMatch; // DOM hooks
  
              var body = document.querySelector("body");
              var modal = document.createElement("section"); // // NOTIFICATION HTML, SEPARATE FROM THE MODAL
              // const notification = document.createElement("div");
              // notification.classList.add("ezy", "ezy-notification");
              // body.appendChild(notification);
              // HOOKING UP OUR CSS
  
              var link1 = document.createElement("link");
              link1.rel = "stylesheet";
              link1.href = "https://cdn.jsdelivr.net/gh/DrJulik/scripts@1.0.947429/styles.min.css";
              document.head.appendChild(link1); // SET CONTENT TYPES FUNCTION
  
              var setContentTypes = function () {
                console.log("setting content types"); // tw-hidden inside section
  
                var products;
  
                if (content.selectedProducts[0]) {
                  products = content.selectedProducts[0].selection;
                }
  
                if (style.campaignType === "modal") {
                  modal.classList.add("ezy", "ezy-style-modal", "open");
                  modal.innerHTML = "" + modal_1.modalTemplate(style, content, freePlan, products, cartData_1);
                  body.appendChild(modal);
                  productFeedSettings();
                } else if (style.campaignType === "full-screen") {
                  modal.classList.add("ezy", "ezy-style-fullscreen", "open"); // bg
  
                  modal.style.backgroundColor = style.backgroundColor;
                  modal.innerHTML = "" + fullscreen_1.fullscreenTemplate(style, content, freePlan, products, cartData_1);
                  body.appendChild(modal);
                  productFeedSettings();
                } else if (style.campaignType === "message-box") {
                  modal.classList.add("ezy", "ezy-style-box", "ezy-style-box--" + style.placementMB, "open");
                  modal.innerHTML = "" + box_1.boxTemplate(style, content, freePlan, products, cartData_1);
                  body.appendChild(modal);
                  productFeedSettings();
                } else if (style.campaignType === "slide-in") {
                  modal.classList.add("ezy", "ezy-style-drawer", "ezy-style-drawer--" + style.placement, "open");
                  modal.innerHTML = "" + drawer_1.drawerTemplate(style, content, freePlan, products, cartData_1);
                  body.appendChild(modal);
                  productFeedSettings();
                }
              }; // INITIATE SETTINGS FUNCTIONS
  
  
              var initiateSettings = function () {
                console.log("settings"); // SETTINGS
                // AUTO CLOSE
  
                var handleAutoClose = function () {
                  console.log("we are auto-closed");
  
                  if (settings.autoClose) {
                    setTimeout(function () {
                      modal.classList.remove("open");
  
                      if (style.campaignType === "slide-in") {
                        modal.classList.add("ezy-style-drawer--animate");
                      } else if (style.campaignType === "message-box") {
                        modal.classList.add("ezy-style-box--animate");
                      } else {
                        modal.classList.add("ezy-style-modal--animate");
                      }
  
                      setTimeout(function () {
                        modal.classList.add("tw-hidden");
                      }, 1000);
                    }, settings.autoCloseTime * 1000);
                  } else {
                    return;
                  }
                }; // resetting frequency when disabled
  
  
                if (!settings.frequency) {
                  localStorage.removeItem("campaign_" + _id);
                  localStorage.removeItem("limit_" + _id);
                } // Frequency
  
  
                var handleFrequency = function (id) {
                  console.log("we are handling frequency"); // Check if they disabled frequency
  
                  var timesShown = "1";
  
                  Date.prototype.addDays = function (days) {
                    var date = new Date(this.valueOf());
                    date.setDate(date.getDate() + days);
                    return date;
                  };
  
                  var limitPeriod = parseInt(settings.frequencyPeriod);
                  var creationDate = new Date(createdAt);
                  var limitResetDate = creationDate.addDays(limitPeriod);
                  var today = new Date();
  
                  if (limitResetDate <= today) {
                    localStorage.removeItem("limit_" + id);
                    localStorage.removeItem("campaign_" + id);
                  }
  
                  if (settings.frequency) {
                    if (!localStorage.getItem("campaign_" + id)) {
                      localStorage.setItem("campaign_" + id, timesShown);
                      var count = localStorage.getItem("campaign_" + id);
  
                      if (count && settings.frequency && parseInt(count) >= parseInt(settings.frequencyTime)) {
                        console.log("Limit is reached");
                        localStorage.setItem("limit_" + id, "true");
                      } else if (count && settings.frequency && parseInt(count) < parseInt(settings.frequencyTime)) {
                        console.log("Limit not reached yet");
                      } else {
                        console.log("Frequency is off");
                      }
                    } else {
                      var count = localStorage.getItem("campaign_" + id);
  
                      if (!localStorage.getItem("limit_" + id)) {
                        count++;
                        localStorage.setItem("campaign_" + id, count);
                      } else {
                        return;
                      }
  
                      if (settings.frequency && parseInt(count) >= parseInt(settings.frequencyTime)) {
                        console.log("Limit is reached");
                        localStorage.setItem("limit_" + id, "true");
                      } else if (settings.frequency && parseInt(count) < parseInt(settings.frequencyTime)) {
                        console.log("Limit not reached yet");
                      } else {
                        console.log("Frequency is off");
                      }
                    }
                  } else {
                    return;
                  }
                };
  
                var triggered = false;
  
                function workOnClassAdd() {
                  handleFrequency(_id);
                  handleAutoClose();
  
                  if (!triggered) {
                    triggered = true;
                  }
                }
  
                function workOnClassRemoval() {} // watch for a specific class change
  
  
                var classWatcher = new ClassWatcher(modal, "open", workOnClassAdd, workOnClassRemoval);
  
                var createModal = function (condition) {
                  // timer for time on page
                  var timerElapsed = false;
                  var exit = false;
                  var scrolled = false;
                  var finishedScrolling = false;
  
                  var checkCondition = function (trigger) {
                    if (trigger.triggerType === "url") {
                      if (trigger.matchingFormat === "contains") {
                        var urlTrigger = window.location.href.includes(trigger.matchingInput);
  
                        if (urlTrigger) {
                          return trigger.triggerType === "url";
                        }
                      } else if (trigger.matchingFormat === "matches") {
                        var urlTrigger = window.location.href === trigger.matchingInput;
  
                        if (urlTrigger) {
                          return trigger.triggerType === "url";
                        }
                      }
                    } else if (trigger.triggerType === "cart-size") {
                      if (trigger.matchingFormat === "greater") {
                        if (cartData_1.item_count > trigger.matchingInput) {
                          return trigger.triggerType === "cart-size";
                        }
                      } else if (trigger.matchingFormat === "less") {
                        if (cartData_1.item_count < trigger.matchingInput) {
                          return trigger.triggerType === "cart-size";
                        }
                      }
                    } else if (trigger.triggerType === "cart-value") {
                      if (trigger.matchingFormat === "greater") {
                        if (cartData_1.total_price / 100 > trigger.matchingInput) {
                          return trigger.triggerType === "cart-value";
                        }
                      } else if (trigger.matchingFormat === "less") {
                        if (cartData_1.total_price / 100 < trigger.matchingInput) {
                          return trigger.triggerType === "cart-value";
                        }
                      }
                    } else if (trigger.triggerType === "product-in-cart") {
                      if (trigger.matchingFormat === "contains") {
                        var matchingCartItems = cartData_1.items.find(function (item) {
                          return item.title.includes(trigger.matchingInput);
                        });
  
                        if (matchingCartItems != undefined) {
                          return trigger.triggerType === "product-in-cart";
                        }
                      } else if (trigger.matchingFormat === "matches") {
                        var matchingCartItems = cartData_1.items.find(function (item) {
                          return item.title === trigger.matchingInput;
                        });
  
                        if (matchingCartItems != undefined) {
                          return trigger.triggerType === "product-in-cart";
                        }
                      }
                    } else if (scrolled) {
                      return trigger.triggerType === "scroll-depth";
                    } else if (trigger.triggerType === "time-on-page") {
                      if (timerElapsed) {
                        return trigger.triggerType === "time-on-page";
                      }
                    } else if (trigger.triggerType === "exit-intent") {
                      if (exit) {
                        return trigger.triggerType === "exit-intent";
                      }
                    }
                  };
  
                  var trapFocus = function (element) {
                    var modal = element;
                    var focusableElements = 'a[href]:not([disabled]), button:not([disabled]), textarea:not([disabled]), input[type="text"]:not([disabled]), input[type="radio"]:not([disabled]), input[type="checkbox"]:not([disabled]), select:not([disabled])';
                    var firstFocusableElement = modal.querySelectorAll(focusableElements)[0];
                    var focusableContent = modal.querySelectorAll(focusableElements);
                    var lastFocusableElement = focusableContent[focusableContent.length - 1];
                    document.addEventListener("keydown", function (e) {
                      var isTabPressed = e.key === "Tab" || e.keyCode === 9;
  
                      if (!isTabPressed) {
                        return;
                      } // if shift key pressed for shift + tab combination
  
  
                      if (e.shiftKey) {
                        if (document.activeElement === firstFocusableElement) {
                          lastFocusableElement.focus();
                          e.preventDefault();
                        }
                      } // if tab key is pressed
                      else {
                          if (document.activeElement === lastFocusableElement) {
                            firstFocusableElement.focus();
                            e.preventDefault();
                          }
                        }
                    });
                  }; // CHECK FUNCTION
  
  
                  function check() {
                    console.log("checked");
                    var conditionsMatched;
  
                    if (condition === "all") {
                      conditionsMatched = triggers.every(checkCondition);
                    } else if (condition === "any") {
                      conditionsMatched = triggers.some(checkCondition);
                    }
  
                    var timerObj = triggers.find(function (trigger) {
                      return trigger.triggerType === "time-on-page";
                    });
  
                    if (timerObj && !timerElapsed) {
                      setTimeout(function () {
                        timerElapsed = true;
                        check();
                      }, timerObj ? timerObj.matchingInput * 1000 : undefined);
                    }
  
                    if (conditionsMatched && !finishedScrolling && !triggered && !localStorage.getItem("limit_" + _id)) {
                      console.log("conditions matched"); // CONTENT TYPES
  
                      setContentTypes();
  
                      if (style.campaignType === "slide-in") {
                        modal.classList.add("ezy-style-drawer--animate");
                      } else if (style.campaignType === "message-box") {
                        modal.classList.add("ezy-style-box--animate");
                      } else {
                        modal.classList.add("ezy-style-modal--animate");
                      }
  
                      setTimeout(function () {
                        if (style.campaignType === "slide-in") {
                          modal.classList.remove("ezy-style-drawer--animate");
                        } else if (style.campaignType === "message-box") {
                          modal.classList.remove("ezy-style-box--animate");
                        } else {
                          modal.classList.remove("ezy-style-modal--animate");
                        }
                      }, 100);
                      var closeBtns = document.getElementsByClassName("closeBtn");
  
                      for (var i = 0; i < closeBtns.length; i++) {
                        closeBtns[i].addEventListener("click", function (e) {
                          if (style.campaignType === "slide-in") {
                            modal.classList.add("ezy-style-drawer--animate");
                          } else if (style.campaignType === "message-box") {
                            modal.classList.add("ezy-style-box--animate");
                          } else {
                            modal.classList.add("ezy-style-modal--animate");
                          }
  
                          setTimeout(function () {
                            modal.classList.add("tw-hidden");
                          }, 1000);
                        });
                        closeBtns[i].addEventListener("keyup", function (e) {
                          if (e.keyCode === 13) {
                            e.preventDefault();
  
                            if (style.campaignType === "slide-in") {
                              modal.classList.add("ezy-style-drawer--animate");
                            } else if (style.campaignType === "message-box") {
                              modal.classList.add("ezy-style-box--animate");
                            } else {
                              modal.classList.add("ezy-style-modal--animate");
                            }
  
                            setTimeout(function () {
                              modal.classList.add("tw-hidden");
                            }, 1000);
                          }
                        });
                      } // MAIN BUTTON AS CLOSE BUTTON FUNC
  
  
                      var mainBtn = document.querySelector(".main-btn");
  
                      if (content.buttonClose && mainBtn != null) {
                        mainBtn.addEventListener("click", function (e) {
                          e.preventDefault();
  
                          if (style.campaignType === "slide-in") {
                            modal.classList.add("ezy-style-drawer--animate");
                          } else if (style.campaignType === "message-box") {
                            modal.classList.add("ezy-style-box--animate");
                          } else {
                            modal.classList.add("ezy-style-modal--animate");
                          }
  
                          setTimeout(function () {
                            modal.classList.add("tw-hidden");
                          }, 1000);
                        });
                        mainBtn.addEventListener("keyup", function (e) {
                          if (e.keyCode === 13) {
                            e.preventDefault();
  
                            if (style.campaignType === "slide-in") {
                              modal.classList.add("ezy-style-drawer--animate");
                            } else {
                              modal.classList.add("ezy-style-modal--animate");
                            }
  
                            setTimeout(function () {
                              modal.classList.add("tw-hidden");
                            }, 1000);
                          }
                        });
                      }
  
                      modal.addEventListener("click", function (e) {
                        if (e.target == this) {
                          if (style.campaignType === "slide-in") {
                            modal.classList.add("ezy-style-drawer--animate");
                          } else {
                            modal.classList.add("ezy-style-modal--animate");
                          }
  
                          setTimeout(function () {
                            modal.classList.add("tw-hidden");
                          }, 1000);
                        }
                      });
                      trapFocus(modal);
  
                      if (triggers.some(function (trigger) {
                        // exit intent
                        return trigger.triggerType === "scroll-depth";
                      })) {
                        finishedScrolling = true;
                      }
  
                      document.removeEventListener("mouseout", mouseEvent);
                    }
                  }
  
                  check(); // Cart catch
  
                  (function (ns, fetch) {
                    if (typeof fetch !== "function") return;
  
                    ns.fetch = function () {
                      var response = fetch.apply(this, arguments);
                      response.then(function (res) {
                        if ([window.location.origin + "/cart/add.js", window.location.origin + "/cart/update.js", window.location.origin + "/cart/change.js", window.location.origin + "/cart/clear.js"].includes(res.url)) {
                          res.clone().json().then(function (data) {
                            var cartDataFetch = fetchCartInfo();
                            cartDataFetch.then(function (cart) {
                              cartData_1 = cart;
                              check();
                            });
                          });
                        }
                      });
                      return response;
                    };
                  })(window, window.fetch); // Cart catch XHR
  
  
                  var open = window.XMLHttpRequest.prototype.open;
  
                  function openReplacement() {
                    this.addEventListener("load", function () {
                      if (["/cart/add.js", "/cart/update.js", "/cart/change.js", "/cart/clear.js"].includes(this._url)) {
                        var cartDataFetch = fetchCartInfo();
                        cartDataFetch.then(function (cart) {
                          cartData_1 = cart;
                          check();
                        });
                      }
                    });
                    return open.apply(this, arguments);
                  }
  
                  window.XMLHttpRequest.prototype.open = openReplacement; // EXIT INTENT CHECK
  
                  var mouseEvent = function (e) {
                    var shouldShowExitIntent = !e.toElement && !e.relatedTarget && e.clientY < 10;
  
                    if (shouldShowExitIntent) {
                      // document.removeEventListener("mouseout", mouseEvent); not removing cuz we wanna check every time
                      // Handling delay here
                      // flip the exit switch
                      exit = true;
                      check();
                    }
                  };
  
                  if (triggers.some(function (trigger) {
                    // exit intent
                    return trigger.triggerType === "exit-intent";
                  })) {
                    document.addEventListener("mouseout", mouseEvent);
                  } // SCROLL DEPTH CHECK
  
  
                  var catchModal = function () {
                    var scrollpos = window.scrollY;
                    var scrollObj = triggers.find(function (trigger) {
                      return trigger.triggerType === "scroll-depth";
                    });
  
                    if (!scrolled && scrollObj) {
                      if (scrollpos >= scrollObj.matchingInput) {
                        console.log("found");
                        scrolled = true;
                        check();
                      }
  
                      console.log("catching");
                    } else {
                      console.log("remove listener");
                      document.removeEventListener("scroll", catchModal);
                    }
                  };
  
                  if (triggers.some(function (trigger) {
                    // exit intent
                    return trigger.triggerType === "scroll-depth";
                  })) {
                    document.addEventListener("scroll", catchModal);
                  }
                }; // MATCH CONDITIONS -------------------------------------------------------------------
  
  
                if (triggerMatch === "all") {
                  console.log("all triggers are matched");
                  createModal("all");
                } else if (triggerMatch === "any") {
                  console.log("any triggers are matched");
                  createModal("any");
                }
              }; // Product feed SETTINGS
  
  
              function productFeedSettings() {
                console.log("productfeedset");
                var ezy = ezy || {};
                ezy.productfeed = {
                  // simple fetch call
                  fetch: function (requestType, url, data, contentType, successCallback, errorCallback) {
                    fetch(url, {
                      method: requestType,
                      headers: {
                        "Content-Type": contentType,
                        Accept: contentType,
                        "X-Requested-With": "xmlhttprequest"
                      },
                      body: JSON.stringify(data)
                    }).then(function (response) {
                      return response.json();
                    }).then(function (data) {
                      successCallback(data);
                    }).catch(function (error) {
                      errorCallback(error);
                    });
                  },
                  // initilize product feed
                  init: function () {
                    // add variant to cart
                    function addVariant(variantID, quantity, callback) {
                      var data = {
                        items: [{
                          id: variantID,
                          quantity: quantity
                        }]
                      };
                      ezy.productfeed.fetch("POST", "/cart/add.js", data, "application/json; charset=utf-8", // success
                      function (data) {
                        console.log(data);
  
                        if (typeof callback === "function" && callback()) {
                          window.setTimeout(function () {
                            callback();
                          }, 500);
                        }
                      }, // error
                      function (error) {
                        if (typeof callback === "function" && callback()) {
                          window.setTimeout(function () {
                            callback();
                          }, 500);
                        }
                      });
                    } // scroll container horizontally
  
  
                    function scrollHorizontally(element, direction) {
                      if (direction == 0) {
                        element.scroll({
                          left: element.scrollLeft - 350,
                          behavior: "smooth"
                        });
                      } else {
                        element.scroll({
                          left: element.scrollLeft + 350,
                          behavior: "smooth"
                        });
                      }
                    } // toggle loading state of button
  
  
                    function toggleButton(button) {
                      if (button.classList.contains("ezy-btn--loading")) {
                        button.classList.remove("ezy-btn--loading");
                        button.disabled = false;
                      } else {
                        button.classList.add("ezy-btn--loading");
                        button.disabled = true;
                      }
                    } // add disabled state to button
  
  
                    function disableButton(button) {
                      button.classList.add("ezy-btn--disabled");
                      button.disabled = true;
                    } // add enabled state to button
  
  
                    function enableButton(button) {
                      button.classList.remove("ezy-btn--disabled");
                      button.disabled = false;
                    } // listen for click on scroll arrows
  
  
                    var scrollArrowButtons = document.getElementsByClassName("js:ezy-scrollArrowButtons");
                    Array.from(scrollArrowButtons).forEach(function (scrollArrowButton) {
                      scrollArrowButton.addEventListener("click", function (e) {
                        var scrollContainerClass = this.getAttribute("data-scroll-container");
                        var scrollDirection = this.getAttribute("data-scroll-direction");
                        var scrollContainers = document.getElementsByClassName(scrollContainerClass);
                        Array.from(scrollContainers).forEach(function (scrollContainer) {
                          scrollHorizontally(scrollContainer, scrollDirection);
                        });
                      });
                    }); // listen for click on atc
  
                    var addVariantButtons = document.getElementsByClassName("js:ezy-addVariantButtons");
                    Array.from(addVariantButtons).forEach(function (addVariantButton) {
                      addVariantButton.addEventListener("click", function (e) {
                        var variantId = this.getAttribute("data-variant-id");
                        showNotification("Product was added to the cart!");
                        toggleButton(addVariantButton);
                        addVariant(variantId, 1, function () {
                          toggleButton(addVariantButton);
                        });
  
                        if (content.closingBehav === "close") {
                          modal.classList.add("ezy-style-modal--animate");
                          setTimeout(function () {
                            modal.classList.add("tw-hidden");
                          }, 1000);
                        }
                      });
                    }); // listen for change to for variant select
  
                    var changeVariantSelects = document.getElementsByClassName("js:ezy-changeVariantSelects");
                    Array.from(changeVariantSelects).forEach(function (changeVariantSelect) {
                      changeVariantSelect.addEventListener("change", function () {
                        var variantAvailability = this.options[this.selectedIndex].getAttribute("data-variant-availability");
                        var variantPrice = this.options[this.selectedIndex].getAttribute("data-variant-price");
                        var variantId = this.options[this.selectedIndex].value;
                        var productItem = this.closest(".ezy-type-productfeed__item");
                        var button = productItem.getElementsByClassName("js:ezy-addVariantButtons")[0]; // update variant id in button
  
                        button.setAttribute("data-variant-id", variantId); // update price in item
  
                        productItem.getElementsByClassName("js:ezy-productPrice")[0].innerHTML = variantPrice; // check availability and update state
  
                        if (variantAvailability == "true") {
                          enableButton(button);
                        } else {
                          disableButton(button);
                        }
                      }); // Create a new 'change' event
  
                      var event = new Event("change");
                      changeVariantSelect.dispatchEvent(event);
                    });
  
                    var showNotification = function (message) {
                      // NOTIFICATION HTML, SEPARATE FROM THE MODAL
                      var notification = document.createElement("div");
                      notification.classList.add("ezy", "ezy-notification");
                      body.appendChild(notification);
                      notification.innerHTML = message;
                      notification.classList.add("ezy-notification--animate");
                      setTimeout(function () {
                        notification.classList.remove("ezy-notification--animate");
                      }, 3000);
                    };
                  }
                };
                ezy.productfeed.init();
              }
  
              initiateSettings();
            });
            return [3
            /*break*/
            , 4];
  
          case 3:
            err_1 = _a.sent();
            console.log(err_1);
            return [3
            /*break*/
            , 4];
  
          case 4:
            return [2
            /*return*/
            ];
        }
      });
    });
  };
  
  window.addEventListener("load", function (event) {
    campaignInfo();
    console.log("inside of load");
  });
  console.log("outside of load");
  },{"regenerator-runtime/runtime":"../node_modules/regenerator-runtime/runtime.js","./templates/style/modal":"templates/style/modal.js","./templates/style/fullscreen":"templates/style/fullscreen.js","./templates/style/box":"templates/style/box.js","./templates/style/drawer":"templates/style/drawer.js"}],"../../../AppData/Roaming/npm/node_modules/parcel-bundler/src/builtins/hmr-runtime.js":[function(require,module,exports) {
  var global = arguments[3];
  var OVERLAY_ID = '__parcel__error__overlay__';
  var OldModule = module.bundle.Module;
  
  function Module(moduleName) {
    OldModule.call(this, moduleName);
    this.hot = {
      data: module.bundle.hotData,
      _acceptCallbacks: [],
      _disposeCallbacks: [],
      accept: function (fn) {
        this._acceptCallbacks.push(fn || function () {});
      },
      dispose: function (fn) {
        this._disposeCallbacks.push(fn);
      }
    };
    module.bundle.hotData = null;
  }
  
  module.bundle.Module = Module;
  var checkedAssets, assetsToAccept;
  var parent = module.bundle.parent;
  
  if ((!parent || !parent.isParcelRequire) && typeof WebSocket !== 'undefined') {
    var hostname = "" || location.hostname;
    var protocol = location.protocol === 'https:' ? 'wss' : 'ws';
    var ws = new WebSocket(protocol + '://' + hostname + ':' + "63437" + '/');
  
    ws.onmessage = function (event) {
      checkedAssets = {};
      assetsToAccept = [];
      var data = JSON.parse(event.data);
  
      if (data.type === 'update') {
        var handled = false;
        data.assets.forEach(function (asset) {
          if (!asset.isNew) {
            var didAccept = hmrAcceptCheck(global.parcelRequire, asset.id);
  
            if (didAccept) {
              handled = true;
            }
          }
        }); // Enable HMR for CSS by default.
  
        handled = handled || data.assets.every(function (asset) {
          return asset.type === 'css' && asset.generated.js;
        });
  
        if (handled) {
          console.clear();
          data.assets.forEach(function (asset) {
            hmrApply(global.parcelRequire, asset);
          });
          assetsToAccept.forEach(function (v) {
            hmrAcceptRun(v[0], v[1]);
          });
        } else if (location.reload) {
          // `location` global exists in a web worker context but lacks `.reload()` function.
          location.reload();
        }
      }
  
      if (data.type === 'reload') {
        ws.close();
  
        ws.onclose = function () {
          location.reload();
        };
      }
  
      if (data.type === 'error-resolved') {
        console.log('[parcel] ✨ Error resolved');
        removeErrorOverlay();
      }
  
      if (data.type === 'error') {
        console.error('[parcel] 🚨  ' + data.error.message + '\n' + data.error.stack);
        removeErrorOverlay();
        var overlay = createErrorOverlay(data);
        document.body.appendChild(overlay);
      }
    };
  }
  
  function removeErrorOverlay() {
    var overlay = document.getElementById(OVERLAY_ID);
  
    if (overlay) {
      overlay.remove();
    }
  }
  
  function createErrorOverlay(data) {
    var overlay = document.createElement('div');
    overlay.id = OVERLAY_ID; // html encode message and stack trace
  
    var message = document.createElement('div');
    var stackTrace = document.createElement('pre');
    message.innerText = data.error.message;
    stackTrace.innerText = data.error.stack;
    overlay.innerHTML = '<div style="background: black; font-size: 16px; color: white; position: fixed; height: 100%; width: 100%; top: 0px; left: 0px; padding: 30px; opacity: 0.85; font-family: Menlo, Consolas, monospace; z-index: 9999;">' + '<span style="background: red; padding: 2px 4px; border-radius: 2px;">ERROR</span>' + '<span style="top: 2px; margin-left: 5px; position: relative;">🚨</span>' + '<div style="font-size: 18px; font-weight: bold; margin-top: 20px;">' + message.innerHTML + '</div>' + '<pre>' + stackTrace.innerHTML + '</pre>' + '</div>';
    return overlay;
  }
  
  function getParents(bundle, id) {
    var modules = bundle.modules;
  
    if (!modules) {
      return [];
    }
  
    var parents = [];
    var k, d, dep;
  
    for (k in modules) {
      for (d in modules[k][1]) {
        dep = modules[k][1][d];
  
        if (dep === id || Array.isArray(dep) && dep[dep.length - 1] === id) {
          parents.push(k);
        }
      }
    }
  
    if (bundle.parent) {
      parents = parents.concat(getParents(bundle.parent, id));
    }
  
    return parents;
  }
  
  function hmrApply(bundle, asset) {
    var modules = bundle.modules;
  
    if (!modules) {
      return;
    }
  
    if (modules[asset.id] || !bundle.parent) {
      var fn = new Function('require', 'module', 'exports', asset.generated.js);
      asset.isNew = !modules[asset.id];
      modules[asset.id] = [fn, asset.deps];
    } else if (bundle.parent) {
      hmrApply(bundle.parent, asset);
    }
  }
  
  function hmrAcceptCheck(bundle, id) {
    var modules = bundle.modules;
  
    if (!modules) {
      return;
    }
  
    if (!modules[id] && bundle.parent) {
      return hmrAcceptCheck(bundle.parent, id);
    }
  
    if (checkedAssets[id]) {
      return;
    }
  
    checkedAssets[id] = true;
    var cached = bundle.cache[id];
    assetsToAccept.push([bundle, id]);
  
    if (cached && cached.hot && cached.hot._acceptCallbacks.length) {
      return true;
    }
  
    return getParents(global.parcelRequire, id).some(function (id) {
      return hmrAcceptCheck(global.parcelRequire, id);
    });
  }
  
  function hmrAcceptRun(bundle, id) {
    var cached = bundle.cache[id];
    bundle.hotData = {};
  
    if (cached) {
      cached.hot.data = bundle.hotData;
    }
  
    if (cached && cached.hot && cached.hot._disposeCallbacks.length) {
      cached.hot._disposeCallbacks.forEach(function (cb) {
        cb(bundle.hotData);
      });
    }
  
    delete bundle.cache[id];
    bundle(id);
    cached = bundle.cache[id];
  
    if (cached && cached.hot && cached.hot._acceptCallbacks.length) {
      cached.hot._acceptCallbacks.forEach(function (cb) {
        cb();
      });
  
      return true;
    }
  }
  },{}]},{},["../../../AppData/Roaming/npm/node_modules/parcel-bundler/src/builtins/hmr-runtime.js","index_live.js"], null)
  //# sourceMappingURL=/index_live.js.map